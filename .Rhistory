padding-right: 10px;
padding-left: 10px;
}
#card1, #card2, #card3, #card4 {
display: none;
}
.logo-container {
display: flex;
justify-content: center;
margin-top: 20px;
}
.logo {
height: 100px;
width: auto;
}
'),
# setBackgroundImage('bluechef.jpg'),
# Make app into a downloadable format for mobile/web
pwa(
domain = "https://shiny.nick-amato.com/HomeChef",
title = "HomeChef",
icon = "www/Chef.png",
output = 'www',
),
div(id = 'loading-screen', 'Loading...'),
div(class = 'logo-container', tags$img(src = 'nobg.png', class = 'logo')),
# ---- Fancy image input ----
shiny::fluidRow(
style = "margin-top: 20px;",
shiny::column(
width = 10, offset = 1,
card(
title = div("Select an image of a product!", align = 'center'),
shiny::fluidRow(
column(
width = 4, offset = 4,
fileInputArea(
"imageInput",
label = "Tap to upload!",
buttonLabel = "Upload a clear picture!",
multiple = FALSE
),
shiny::tableOutput("files")
)
)
)
)
),
# ---- end fancy ----
div(
# selectInput(inputId = "select1", label = "Select which meal this is for",
#             choices = c('Breakfast','Brunch','Lunch','Dinner')),
# card(
#   radioGroupButtons(
#     inputId = "Id070",
#     label = "Select Which Meal",
#     choices = c("Breakfast",
#                 "Lunch", "Dinner"),
#     justified = TRUE,
#     checkIcon = list(
#       yes = icon("ok",
#                  lib = "glyphicon"))
#   )
# ),
# selectInput(inputId = "allergiesSelect", label = "Do you have food restrictions?",
#             choices = c("None", "Gluten Free", "Peanuts", "Fish","Lactose",
#                         "Vegetarian","Vegan"),
#             multiple = TRUE,
#             selected = "None"),
# actionButton(inputId = "generate", label = "Get Recipe!", class = 'btn-primary'),
fluidRow(
column(
actionBttn(inputId = 'generate',
label = 'Get Recipe!',
color = 'primary',
icon = icon('utensils'),
style = 'jelly',
block = TRUE),
br(),
br(),
width = 10, offset = 1,
card(id = 'card1',
h4("Recipe Name"),
hr(),
textOutput('recipeName'),
align = 'center'
),
card(id = 'card2',
h4("Recipe Ingredients"),
hr(),
div(uiOutput('recipeIngredients'), class = 'centered-list-container'),
align = 'center'
),
card(id = 'card3',
h4("Recipe Instructions"),
hr(),
div(uiOutput('recipeInstructions'), class = 'centered-list-container'),
align = 'center'
),
card(id = 'card4',
h4('Nutrition Estimates (per serving)'),
hr(),
div(uiOutput('nutritionEstimates'), class = 'centered-list-container'),
align = 'center'
)
)
)
,
align = 'center'
)
)
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
shiny::runApp('HomeChefApp')
shiny::runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
shiny::runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
df = data.frame(id = c(1,1,2,2),
A = c(25, NA, NA, NA),
B = c(NA, 3, NA, NA))
View(df)
df = data.frame(id = c(1,1,2,2),
A = c(25, NA, 4, NA),
B = c(NA, 3, NA, 15))
View(df)
library(dplyr)
squished_df <- df %>%
group_by(id) %>%
summarize(
A = coalesce(A[!is.na(A)], NA),
B = coalesce(B[!is.na(B)], NA)
)
View(squished_df)
# Create the sample dataframe
df <- data.frame(
id = c(1, 1, 2, 2),
A = c(25, NA, 4, NA),
B = c(NA, 3, NA, 15),
C = c(10, NA, 20, 30),
D = c(NA, 5, NA, 35)
)
View(df)
# Function to pick the first non-NA value
first_non_na <- function(x) {
x[!is.na(x)][1]
}
# Group by the id column and summarize
squished_df <- df %>%
group_by(id) %>%
summarize(across(c(2:5), first_non_na))
# Group by the id column and summarize
squished_df <- df %>%
group_by(id) %>%
summarize(across(c(2:4), first_non_na))
View(squished_df)
# Group by the id column and summarize
squished_df <- df %>%
group_by(id) %>%
summarize(across(c(1:4), first_non_na))
squished_df <- df %>%
group_by(id)
View(df)
View(squished_df)
# Group by the id column and summarize
squished_df <- df %>%
group_by(id) %>%
summarize(across(c(A:D), first_non_na))
# Create the sample dataframe
df <- data.frame(
additional = c(4, 4, 6, 6)
id = c(1, 1, 2, 2),
# Function to pick the first non-NA value
first_non_na <- function(x) {
x[!is.na(x)][1]
}
# Group by the id column and summarize
squished_df <- df %>%
group_by(id) %>%
summarize(across(c(A:D), first_non_na))
# Create the sample dataframe
df <- data.frame(
additional = c(4, 4, 6, 6),
id = c(1, 1, 2, 2),
A = c(25, NA, 4, NA),
B = c(NA, 3, NA, 15),
C = c(10, NA, 20, 30),
D = c(NA, 5, NA, 35)
)
# Function to pick the first non-NA value
first_non_na <- function(x) {
x[!is.na(x)][1]
}
# Group by the id column and summarize
squished_df <- df %>%
group_by(id) %>%
summarize(across(c(A:D), first_non_na))
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
# Helper functions for handling cookies
cookies <- shiny::session$ns
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
# initialize amazon aws storage
x = data.frame('username' = character(),
'signup_date' = character(),
'recipes' = character())
# initialize amazon aws storage
x = data.frame('username' = character(),
'signup_date' = character(),
'recipes' = character())
saveRDS(x, file = paste0(tempdir(), "/intial.rds"))
put_object(
file = file.path(tempdir(), "initial.rds"),
object = paste0("feedback.rds"),
bucket = paste0("home-chef-tracker")
)
library(aws.s3)
# initialize amazon aws storage
x = data.frame('username' = character(),
'signup_date' = character(),
'recipes' = character())
saveRDS(x, file = paste0(tempdir(), "/intial.rds"))
put_object(
file = file.path(tempdir(), "initial.rds"),
object = paste0("feedback.rds"),
bucket = paste0("home-chef-tracker")
)
# initialize amazon aws storage
x = data.frame('username' = character(),
'signup_date' = character(),
'recipes' = character())
Sys.setenv(
"AWS_ACCESS_KEY_ID" = access_key,
"AWS_SECRET_ACCESS_KEY" = secret_key,
"AWS_DEFAULT_REGION" = "us-east-1"
)
getwd()
secret_key = readRDS("HomeChefApp/secret_key.rds")
access_key = readRDS('HomeChefApp/access_key.rds')
secret_key = readRDS("HomeChefApp/secret_key.rds")
Sys.setenv(
"AWS_ACCESS_KEY_ID" = access_key,
"AWS_SECRET_ACCESS_KEY" = secret_key,
"AWS_DEFAULT_REGION" = "us-east-1"
)
# initialize amazon aws storage
x = data.frame('username' = character(),
'signup_date' = character(),
'recipes' = character())
saveRDS(x, file = paste0(tempdir(), "/intial.rds"))
put_object(
file = file.path(tempdir(), "initial.rds"),
object = paste0("feedback.rds"),
bucket = paste0("home-chef-tracker")
)
aws.s3::bucketlist()
# initialize amazon aws storage
x = data.frame('username' = character(),
'signup_date' = character(),
'recipes' = character())
saveRDS(x, file = paste0(tempdir(), "/intial.rds"))
put_object(
file = file.path(tempdir(), "initial.rds"),
object = paste0("feedback.rds"),
bucket = paste0("home-chef-tracker")
)
Sys.setenv(
"AWS_ACCESS_KEY_ID" = access_key,
"AWS_SECRET_ACCESS_KEY" = secret_key,
"AWS_DEFAULT_REGION" = "us-east-1"
)
# initialize amazon aws storage
x = data.frame('username' = character(),
'signup_date' = character(),
'recipes' = character())
saveRDS(x, file = paste0(tempdir(), "/intial.rds"))
put_object(
file = file.path(tempdir(), "initial.rds"),
object = paste0("users.rds"),
bucket = paste0("homechef-tracker")
)
user_tracker = aws.s3::s3readRDS('users.rds', 'homechef-tracker')
access_key = readRDS('access_key.rds')
Sys.setenv(
"AWS_ACCESS_KEY_ID" = access_key,
"AWS_SECRET_ACCESS_KEY" = secret_key,
"AWS_DEFAULT_REGION" = "us-east-1"
)
?s3readRDS
user_tracker = aws.s3::s3readRDS(object = 'users.rds', bucket = 'homechef-tracker')
user_tracker = aws.s3::s3readRDS(x = 'users.rds', bucket = 'homechef-tracker')
user_tracker = aws.s3::s3readRDS(object = 'users.rds', bucket = 'homechef-tracker')
users <- readRDS("E:/R/HomeChef/HomeChefApp/www/users.rds")
# initialize amazon aws storage
x = data.frame('username' = character(),
'signup_date' = character(),
'recipes' = character())
saveRDS(x, file = paste0(tempdir(), "/intial.rds"))
test = readRDS(file.path(tempdir(), "initial.rds"))
tmpdir = tempdir()
saveRDS(x, file = paste0(tmpdir, "/intial.rds"))
test = readRDS(file.path(tmpdir, "initial.rds"))
test = readRDS(file.path(tmpdir, "/initial.rds"))
test = readRDS(file.path(tmpdir, "\\initial.rds"))
test = readRDS(file.path(tmpdir, "/initial.rds"))
test = readRDS(file.path(tmpdir, "initial.rds"))
saveRDS(x, file = paste0(tempdir(), "/initial.rds"))
put_object(
file = file.path(tempdir(), "initial.rds"),
object = paste0("users.rds"),
bucket = paste0("homechef-tracker")
)
user_tracker = aws.s3::s3readRDS(object = 'users.rds', bucket = 'homechef-tracker')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
names(user_tracker)
runApp('HomeChefApp')
runApp('HomeChefApp')
user_tracker = aws.s3::s3readRDS(object = 'users.rds', bucket = 'homechef-tracker')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
user_tracker = aws.s3::s3readRDS(object = 'users.rds', bucket = 'homechef-tracker')
View(user_tracker)
runApp('HomeChefApp')
runApp('HomeChefApp')
shiny::runApp('HomeChefApp')
runApp('HomeChefApp')
vision_response = gemini_vision(vision_prompt, "C:/Users/xbox/Pictures/food.jpg")
vision_prompt = paste0("Please list the ingredients in this picture. Your response should be in the format \\n*(ingredient)")
vision_response = gemini_vision(vision_prompt, "C:/Users/xbox/Pictures/food.jpg")
ingredients = paste(str_match_all(string = vision_response, pattern = "\\*\\s(.*)\\n")[[1]][,2], collapse = ", ")
vision_prompt = paste0("Please list the ingredients in this picture. Your response should be in the format: \\n*(ingredient)")
vision_response = gemini_vision(vision_prompt, "C:/Users/xbox/Pictures/food.jpg")
vision_prompt = paste0("Please list the ingredients in this picture. Your response should be in the format: \\n*(ingredient)*\\n")
vision_response = gemini_vision(vision_prompt, "C:/Users/xbox/Pictures/food.jpg")
ingredients = paste(str_match_all(string = vision_response, pattern = "\\*\\s(.*)\\n")[[1]][,2], collapse = ", ")
vision_prompt = paste0("Please list the ingredients in this picture. Your response should be in the format: *(ingredient)*")
vision_response = gemini_vision(vision_prompt, "C:/Users/xbox/Pictures/food.jpg")
ingredients = paste(str_match_all(string = vision_response, pattern = "\\*\\s(.*)\\n")[[1]][,2], collapse = ", ")
recipe_prompt = paste0("Using strictly the following ingredients, give me a recipe for ",'dinner',".",
" The ingredients are: ",ingredients,". ",
"Please give the amount of each ingredient to use as well.",
" Return your response in the format: \\n **(name of recipe)** \\n\\n",
"**INGREDIENTS:**\\n\\n",
"\\n\\n\\n *(recipe item)* \\n\\n",
"\\n\\n **INSTRUCTIONS** \\n\\n",
" (Instructions on how to cook numbered like \\n digit.",
" Please end the last step with the words 'END RECIPE'.")
recipe_response = gemini(recipe_prompt)
vision_prompt = paste0("Please accurately list the ingredients in this picture. Your response should be in the format: *(ingredient)*")
vision_response = gemini_vision(vision_prompt, "C:/Users/xbox/Pictures/food.jpg")
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
vision_response
ingredients_ind = str_match_all(string = vision_response, pattern = "\\*\\s(.*)\\n")[[1]][,2]
ingredient_inputs = lapply(seq_along(ingredients_ind), function(i){
textInput(paste0('ingredient_',i), label = paste("Ingredient",i), value = ingredients_ind[i])
})
View(ingredient_inputs)
runApp('HomeChefApp')
runApp('HomeChefApp')
do.call(tagList, ingredient_inputs)
runApp('HomeChefApp')
do.call(tagList, ingredient_inputs)
p("Please confirm or correct the ingredients:")
div(
p("Please confirm or correct the ingredients:"),
do.call(tagList, ingredient_inputs)
)
tagList(
div(
p("Please confirm or correct the ingredients:"),
do.call(tagList, ingredient_inputs)
),
actionButton("confirmIngredients", "Confirm")
)
?shinyalert
# Show the dynamic inputs in a shinyalert modal
shinyalert(
title = "Confirm Ingredients",
html = TRUE,
text = tagList(
div(
p("Please confirm or correct the ingredients:"),
do.call(tagList, ingredient_inputs)
),
actionButton("confirmIngredients", "Confirm")
),
size = "l"
)
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
shiny::runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
?bs_theme
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
