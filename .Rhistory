# Function to pick the first non-NA value
first_non_na <- function(x) {
x[!is.na(x)][1]
}
# Group by the id column and summarize
squished_df <- df %>%
group_by(id) %>%
summarize(across(c(2:5), first_non_na))
# Group by the id column and summarize
squished_df <- df %>%
group_by(id) %>%
summarize(across(c(2:4), first_non_na))
View(squished_df)
# Group by the id column and summarize
squished_df <- df %>%
group_by(id) %>%
summarize(across(c(1:4), first_non_na))
squished_df <- df %>%
group_by(id)
View(df)
View(squished_df)
# Group by the id column and summarize
squished_df <- df %>%
group_by(id) %>%
summarize(across(c(A:D), first_non_na))
# Create the sample dataframe
df <- data.frame(
additional = c(4, 4, 6, 6)
id = c(1, 1, 2, 2),
# Function to pick the first non-NA value
first_non_na <- function(x) {
x[!is.na(x)][1]
}
# Group by the id column and summarize
squished_df <- df %>%
group_by(id) %>%
summarize(across(c(A:D), first_non_na))
# Create the sample dataframe
df <- data.frame(
additional = c(4, 4, 6, 6),
id = c(1, 1, 2, 2),
A = c(25, NA, 4, NA),
B = c(NA, 3, NA, 15),
C = c(10, NA, 20, 30),
D = c(NA, 5, NA, 35)
)
# Function to pick the first non-NA value
first_non_na <- function(x) {
x[!is.na(x)][1]
}
# Group by the id column and summarize
squished_df <- df %>%
group_by(id) %>%
summarize(across(c(A:D), first_non_na))
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
# Helper functions for handling cookies
cookies <- shiny::session$ns
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
# initialize amazon aws storage
x = data.frame('username' = character(),
'signup_date' = character(),
'recipes' = character())
# initialize amazon aws storage
x = data.frame('username' = character(),
'signup_date' = character(),
'recipes' = character())
saveRDS(x, file = paste0(tempdir(), "/intial.rds"))
put_object(
file = file.path(tempdir(), "initial.rds"),
object = paste0("feedback.rds"),
bucket = paste0("home-chef-tracker")
)
library(aws.s3)
# initialize amazon aws storage
x = data.frame('username' = character(),
'signup_date' = character(),
'recipes' = character())
saveRDS(x, file = paste0(tempdir(), "/intial.rds"))
put_object(
file = file.path(tempdir(), "initial.rds"),
object = paste0("feedback.rds"),
bucket = paste0("home-chef-tracker")
)
# initialize amazon aws storage
x = data.frame('username' = character(),
'signup_date' = character(),
'recipes' = character())
Sys.setenv(
"AWS_ACCESS_KEY_ID" = access_key,
"AWS_SECRET_ACCESS_KEY" = secret_key,
"AWS_DEFAULT_REGION" = "us-east-1"
)
getwd()
secret_key = readRDS("HomeChefApp/secret_key.rds")
access_key = readRDS('HomeChefApp/access_key.rds')
secret_key = readRDS("HomeChefApp/secret_key.rds")
Sys.setenv(
"AWS_ACCESS_KEY_ID" = access_key,
"AWS_SECRET_ACCESS_KEY" = secret_key,
"AWS_DEFAULT_REGION" = "us-east-1"
)
# initialize amazon aws storage
x = data.frame('username' = character(),
'signup_date' = character(),
'recipes' = character())
saveRDS(x, file = paste0(tempdir(), "/intial.rds"))
put_object(
file = file.path(tempdir(), "initial.rds"),
object = paste0("feedback.rds"),
bucket = paste0("home-chef-tracker")
)
aws.s3::bucketlist()
# initialize amazon aws storage
x = data.frame('username' = character(),
'signup_date' = character(),
'recipes' = character())
saveRDS(x, file = paste0(tempdir(), "/intial.rds"))
put_object(
file = file.path(tempdir(), "initial.rds"),
object = paste0("feedback.rds"),
bucket = paste0("home-chef-tracker")
)
Sys.setenv(
"AWS_ACCESS_KEY_ID" = access_key,
"AWS_SECRET_ACCESS_KEY" = secret_key,
"AWS_DEFAULT_REGION" = "us-east-1"
)
# initialize amazon aws storage
x = data.frame('username' = character(),
'signup_date' = character(),
'recipes' = character())
saveRDS(x, file = paste0(tempdir(), "/intial.rds"))
put_object(
file = file.path(tempdir(), "initial.rds"),
object = paste0("users.rds"),
bucket = paste0("homechef-tracker")
)
user_tracker = aws.s3::s3readRDS('users.rds', 'homechef-tracker')
access_key = readRDS('access_key.rds')
Sys.setenv(
"AWS_ACCESS_KEY_ID" = access_key,
"AWS_SECRET_ACCESS_KEY" = secret_key,
"AWS_DEFAULT_REGION" = "us-east-1"
)
?s3readRDS
user_tracker = aws.s3::s3readRDS(object = 'users.rds', bucket = 'homechef-tracker')
user_tracker = aws.s3::s3readRDS(x = 'users.rds', bucket = 'homechef-tracker')
user_tracker = aws.s3::s3readRDS(object = 'users.rds', bucket = 'homechef-tracker')
users <- readRDS("E:/R/HomeChef/HomeChefApp/www/users.rds")
# initialize amazon aws storage
x = data.frame('username' = character(),
'signup_date' = character(),
'recipes' = character())
saveRDS(x, file = paste0(tempdir(), "/intial.rds"))
test = readRDS(file.path(tempdir(), "initial.rds"))
tmpdir = tempdir()
saveRDS(x, file = paste0(tmpdir, "/intial.rds"))
test = readRDS(file.path(tmpdir, "initial.rds"))
test = readRDS(file.path(tmpdir, "/initial.rds"))
test = readRDS(file.path(tmpdir, "\\initial.rds"))
test = readRDS(file.path(tmpdir, "/initial.rds"))
test = readRDS(file.path(tmpdir, "initial.rds"))
saveRDS(x, file = paste0(tempdir(), "/initial.rds"))
put_object(
file = file.path(tempdir(), "initial.rds"),
object = paste0("users.rds"),
bucket = paste0("homechef-tracker")
)
user_tracker = aws.s3::s3readRDS(object = 'users.rds', bucket = 'homechef-tracker')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
names(user_tracker)
runApp('HomeChefApp')
runApp('HomeChefApp')
user_tracker = aws.s3::s3readRDS(object = 'users.rds', bucket = 'homechef-tracker')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
user_tracker = aws.s3::s3readRDS(object = 'users.rds', bucket = 'homechef-tracker')
View(user_tracker)
runApp('HomeChefApp')
runApp('HomeChefApp')
shiny::runApp('HomeChefApp')
runApp('HomeChefApp')
vision_response = gemini_vision(vision_prompt, "C:/Users/xbox/Pictures/food.jpg")
vision_prompt = paste0("Please list the ingredients in this picture. Your response should be in the format \\n*(ingredient)")
vision_response = gemini_vision(vision_prompt, "C:/Users/xbox/Pictures/food.jpg")
ingredients = paste(str_match_all(string = vision_response, pattern = "\\*\\s(.*)\\n")[[1]][,2], collapse = ", ")
vision_prompt = paste0("Please list the ingredients in this picture. Your response should be in the format: \\n*(ingredient)")
vision_response = gemini_vision(vision_prompt, "C:/Users/xbox/Pictures/food.jpg")
vision_prompt = paste0("Please list the ingredients in this picture. Your response should be in the format: \\n*(ingredient)*\\n")
vision_response = gemini_vision(vision_prompt, "C:/Users/xbox/Pictures/food.jpg")
ingredients = paste(str_match_all(string = vision_response, pattern = "\\*\\s(.*)\\n")[[1]][,2], collapse = ", ")
vision_prompt = paste0("Please list the ingredients in this picture. Your response should be in the format: *(ingredient)*")
vision_response = gemini_vision(vision_prompt, "C:/Users/xbox/Pictures/food.jpg")
ingredients = paste(str_match_all(string = vision_response, pattern = "\\*\\s(.*)\\n")[[1]][,2], collapse = ", ")
recipe_prompt = paste0("Using strictly the following ingredients, give me a recipe for ",'dinner',".",
" The ingredients are: ",ingredients,". ",
"Please give the amount of each ingredient to use as well.",
" Return your response in the format: \\n **(name of recipe)** \\n\\n",
"**INGREDIENTS:**\\n\\n",
"\\n\\n\\n *(recipe item)* \\n\\n",
"\\n\\n **INSTRUCTIONS** \\n\\n",
" (Instructions on how to cook numbered like \\n digit.",
" Please end the last step with the words 'END RECIPE'.")
recipe_response = gemini(recipe_prompt)
vision_prompt = paste0("Please accurately list the ingredients in this picture. Your response should be in the format: *(ingredient)*")
vision_response = gemini_vision(vision_prompt, "C:/Users/xbox/Pictures/food.jpg")
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
vision_response
ingredients_ind = str_match_all(string = vision_response, pattern = "\\*\\s(.*)\\n")[[1]][,2]
ingredient_inputs = lapply(seq_along(ingredients_ind), function(i){
textInput(paste0('ingredient_',i), label = paste("Ingredient",i), value = ingredients_ind[i])
})
View(ingredient_inputs)
runApp('HomeChefApp')
runApp('HomeChefApp')
do.call(tagList, ingredient_inputs)
runApp('HomeChefApp')
do.call(tagList, ingredient_inputs)
p("Please confirm or correct the ingredients:")
div(
p("Please confirm or correct the ingredients:"),
do.call(tagList, ingredient_inputs)
)
tagList(
div(
p("Please confirm or correct the ingredients:"),
do.call(tagList, ingredient_inputs)
),
actionButton("confirmIngredients", "Confirm")
)
?shinyalert
# Show the dynamic inputs in a shinyalert modal
shinyalert(
title = "Confirm Ingredients",
html = TRUE,
text = tagList(
div(
p("Please confirm or correct the ingredients:"),
do.call(tagList, ingredient_inputs)
),
actionButton("confirmIngredients", "Confirm")
),
size = "l"
)
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
shiny::runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
?bs_theme
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
shiny::runApp('HomeChefApp')
user_tracker = aws.s3::s3readRDS(object = 'users.rds', bucket = 'homechef-tracker')
Sys.setenv(
"AWS_ACCESS_KEY_ID" = access_key,
"AWS_SECRET_ACCESS_KEY" = secret_key,
"AWS_DEFAULT_REGION" = "us-east-1"
)
access_key = readRDS('access_key.rds')
secret_key = readRDS("secret_key.rds")
shiny::runApp('HomeChefApp')
Sys.setenv(
"AWS_ACCESS_KEY_ID" = access_key,
"AWS_SECRET_ACCESS_KEY" = secret_key,
"AWS_DEFAULT_REGION" = "us-east-1"
)
access_key = readRDS('HomeChefApp/access_key.rds')
secret_key = readRDS("HomeChefApp/secret_key.rds")
Sys.setenv(
"AWS_ACCESS_KEY_ID" = access_key,
"AWS_SECRET_ACCESS_KEY" = secret_key,
"AWS_DEFAULT_REGION" = "us-east-1"
)
user_tracker = aws.s3::s3readRDS(object = 'users.rds', bucket = 'homechef-tracker')
View(user_tracker)
user = 'newUser'
is.na(user_tracker$recipes[user_tracker$username == user])
if(is.na(user_tracker$recipes[user_tracker$username == user])){
user_tracker$recipes[user_tracker$username == user] = list()
}
user_tracker$username == user
user_tracker$recipes[user_tracker$username == user]
user_tracker$recipes[user_tracker$username == user] = list(recipes = NA)
View(user_tracker)
vision_prompt = paste0("Please accurately list the ingredients in this picture. Your response should be in the format: *(ingredient)* and end the response with *END*")
vision_response = gemini_vision(vision_prompt, "C:/Users/xbox/Pictures/food.jpg")
print(vision_response)
ingredients_ind = str_match_all(string = vision_response, pattern = "\\*\\s(.*)\\n|\\* (.+?)\\*END")[[1]][,2]
ingredients_for_mod = paste(ingredients_ind, collapse = ", ")
print(ingredients_for_mod)
rv$num_ingredients = length(ingredients_ind)
# You can now use ingredient_values for further processing
ingredients = (paste(ingredients_for_mod, collapse = ", "))
ingredients = input$updatedIngredients
shinybusy::show_modal_spinner(spin = 'semipolar',
color = 'white',
text = 'PREPARE TO FEAST!')
recipe_prompt = paste0("Using strictly the following ingredients, give me a recipe for ",'dinner',".",
" The ingredients are: ",ingredients,". ",
"Please give the amount of each ingredient to use as well.",
" Return your response in the format: \\n **(name of recipe)** \\n\\n",
"**INGREDIENTS:**\\n\\n",
"\\n\\n\\n *(recipe item)* \\n\\n",
"\\n\\n **INSTRUCTIONS** \\n\\n",
" (Instructions on how to cook numbered like \\n digit.",
" Please end the last step with the words 'END RECIPE'.")
recipe_response = gemini(recipe_prompt)
recipe_name = str_match(string = recipe_response, pattern = "\\*\\*(.*?)\\*\\*")[,2]
recipe_ingredients = trimws(str_match_all(string = recipe_response, pattern = "\\* ([^\\*]+)")[[1]][,2])
recipe_instructions = str_match_all(string = recipe_response, pattern = "\\d+\\.\\s(.*)\\n")[[1]][,2]
print(recipe_response)
nutrition_info = GetNutrition(recipe_ingredients)
if(any(is.na(c(nutrition_info$nutrition_total_calories,
nutrition_info$nutrition_total_protein,
nutrition_info$nutrition_total_fats,
nutrition_info$nutrition_total_carbs)))){
stop('something went wrong nutrition')
}
print('made it line 589')
total_cal_text = paste0("Calorie Estimate: ", nutrition_info$nutrition_total_calories)
total_protein_text = paste0("Protein Estimate: ", nutrition_info$nutrition_total_protein)
total_carb_text = paste0("Carb Estimate: ", nutrition_info$nutrition_total_carbs)
total_fat_text = paste0('Fats Estimate: ', nutrition_info$nutrition_total_fats)
estimates_text = c(total_cal_text, total_protein_text, total_carb_text, total_fat_text)
recipe = reactiveValues(name = character(),
ingredients = character(),
instructions = character(),
estimates = character())
recipe$name = recipe_name
recipe$ingredients = recipe_ingredients
recipe$instructions = recipe_instructions
recipe$estimates = estimates_text
user_tracker = aws.s3::s3readRDS(object = 'users.rds', bucket = 'homechef-tracker')
user = 'newUser'
recipe_list = list(
name = recipe$name,
ingredients = recipe_ingredients,
instructions = recipe_instructions,
estimates = estimates_text
)
recipe_list = list(
name = recipe_name,
ingredients = recipe_ingredients,
instructions = recipe_instructions,
estimates = estimates_text
)
user_tracker$recipes[user_tracker$username == user] = list(recipe_list)
user_tracker$recipes[6]
user_tracker = aws.s3::s3readRDS(object = 'users.rds', bucket = 'homechef-tracker')
user = 'newUser'
user_tracker$recipes[user_tracker$username == user] = list(recipe)
user_tracker$recipes[6]
recipe
recipe_list = list(
name = recipe_name,
ingredients = recipe_ingredients,
instructions = recipe_instructions,
estimates = estimates_text
)
user_tracker$recipes[user_tracker$username == user] = list(recipe_list)
View(user_tracker)
user_tracker$recipes[6]
is.na(user_tracker$recipes[user_tracker$username == user])
user_tracker = aws.s3::s3readRDS(object = 'users.rds', bucket = 'homechef-tracker')
user = 'newUser'
recipe_list = list(
name = recipe_name,
ingredients = recipe_ingredients,
instructions = recipe_instructions,
estimates = estimates_text
)
if(is.na(user_tracker$recipes[user_tracker$username == user])){
user_tracker$recipes[user_tracker$username == user] = list(list(recipe_list))
}
user_tracker$recipes[[6]]
is.na(user_tracker$recipes[user_tracker$username == user])
# Retrieve the existing recipes list
existing_recipes <- user_tracker$recipes[user_tracker$username == user][[1]]
# Append the new recipe to the existing list
updated_recipes <- append(existing_recipes, list(recipe_list))
updated_recipes
# Update the data frame with the new list of recipes
user_tracker$recipes[user_tracker$username == user] <- list(updated_recipes)
user_tracker$recipes[6]
length(user_tracker$recipes[6])
length(user_tracker$recipes[6][[1]])
runApp('HomeChefApp')
saveRDS(user_tracker, file = paste0(tempdir(), "/tmp.rds"))
put_object(
file = file.path(tempdir(), "tmp.rds"),
object = paste0("users.rds"),
bucket = paste0("homechef-tracker")
)
runApp('HomeChefApp')
runApp('HomeChefApp')
install.packages("remotes")
remotes::install_github("daattali/shinydisconnect")
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
user_tracker = aws.s3::s3readRDS(object = 'users.rds', bucket = 'homechef-tracker')
runApp('HomeChefApp')
runApp('HomeChefApp')
latest_recipe = user_tracker$recipes[user_tracker$username == rv$username][[1]]
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
View(user_tracker)
runApp('HomeChefApp')
View(user_tracker)
is.na(user_tracker$recipes[user_tracker$username == 'nick'])
user_tracker = aws.s3::s3readRDS(object = 'users.rds', bucket = 'homechef-tracker')
View(user_tracker)
user_tracker = aws.s3::s3readRDS(object = 'users.rds', bucket = 'homechef-tracker')
View(user_tracker)
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
toString(user_tracker$recipes[user_tracker$username == 'newUser'])
toString(user_tracker$recipes[user_tracker$username == 'nick'])
length(toString(user_tracker$recipes[user_tracker$username == 'nick']))
length(toString(user_tracker$recipes[user_tracker$username == 'newUser']))
runApp('HomeChefApp')
runApp('HomeChefApp')
runApp('HomeChefApp')
